// TasksPage.jsx
import React, { useState } from 'react';
import SidebarMenu from '../Common/SidebarMenu';
import './TasksPage.css';

const TasksPage = () => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [selectedCourse, setSelectedCourse] = useState(null);
  const [selectedTask, setSelectedTask] = useState(null);
  const [code, setCode] = useState('');
  const [output, setOutput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [completedTasks, setCompletedTasks] = useState([]);

  // –ö—É—Ä—Å—ã —Å –∑–∞–¥–∞—á–∞–º–∏ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ)
  const programmingCourses = [
    { id: 1, name: '–û—Å–Ω–æ–≤—ã Python' },
    { id: 3, name: '–ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö' },
    { id: 6, name: '–û—Å–Ω–æ–≤—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö' }
  ];

  // –ó–∞–¥–∞—á–∏ –ø–æ –∫—É—Ä—Å–∞–º
  const tasks = {
    1: [
      {
        id: 101,
        title: '–°—É–º–º–∞ –¥–≤—É—Ö —á–∏—Å–µ–ª',
        description: '–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ —á–∏—Å–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö —Å—É–º–º—É.',
        difficulty: '–õ–µ–≥–∫–∞—è',
        testCases: [
          { input: '2, 3', output: '5' },
          { input: '-1, 1', output: '0' },
          { input: '0, 0', output: '0' }
        ],
        defaultCode: 'def sum_two_numbers(a, b):\n    # –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å\n    pass',
        explanation: '–≠—Ç–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞—à–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤ Python. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å —Å—É–º–º—É –¥–≤—É—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.'
      },
      {
        id: 102,
        title: '–§–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞',
        description: '–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —á–∏—Å–ª–∞ n.',
        difficulty: '–°—Ä–µ–¥–Ω—è—è',
        locked: true,
        testCases: [
          { input: '5', output: '120' },
          { input: '0', output: '1' },
          { input: '1', output: '1' }
        ],
        defaultCode: 'def factorial(n):\n    # –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å\n    pass',
        explanation: '–§–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ n - —ç—Ç–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ n. –£—á—Ç–∏—Ç–µ –æ—Å–æ–±—ã–π —Å–ª—É—á–∞–π –¥–ª—è 0! = 1.'
      }
    ],
    3: [
      {
        id: 301,
        title: '–ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫',
        description: '–†–µ–∞–ª–∏–∑—É–π—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ.',
        difficulty: '–°—Ä–µ–¥–Ω—è—è',
        testCases: [
          { input: '[1, 2, 3, 4, 5], 3', output: '2' },
          { input: '[1, 3, 5, 7, 9], 2', output: '-1' }
        ],
        defaultCode: 'def binary_search(arr, target):\n    # –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å\n    pass',
        explanation: '–ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞ O(log n) –≤—Ä–µ–º–µ–Ω–∏. –ú–∞—Å—Å–∏–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–ª–∏ -1, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.'
      }
    ],
    6: [
      {
        id: 601,
        title: 'SQL –∑–∞–ø—Ä–æ—Å: –í—ã–±–æ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö',
        description: '–ù–∞–ø–∏—à–∏—Ç–µ SQL –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç.',
        difficulty: '–õ–µ–≥–∫–∞—è',
        testCases: [
          { input: '–¢–∞–±–ª–∏—Ü–∞ users —Å –ø–æ–ª—è–º–∏ id, name, age', output: '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å age > 18' }
        ],
        defaultCode: 'SELECT * FROM users WHERE age > 18;',
        explanation: '–≠—Ç–æ –±–∞–∑–æ–≤—ã–π SQL –∑–∞–ø—Ä–æ—Å —Å —É—Å–ª–æ–≤–∏–µ–º WHERE –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.'
      }
    ]
  };

  const handleRunCode = () => {
    setIsLoading(true);
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    setTimeout(() => {
      setOutput('–¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! üéâ');
      setIsLoading(false);
    }, 1500);
  };

  const handleSubmitSolution = () => {
    setIsLoading(true);
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
    setTimeout(() => {
      setOutput('–†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.');
      setCompletedTasks([...completedTasks, selectedTask.id]);
      setIsLoading(false);
    }, 2000);
  };

  const isTaskUnlocked = (task) => {
    if (!task.locked) return true;
    const courseTasks = tasks[selectedCourse];
    const taskIndex = courseTasks.findIndex(t => t.id === task.id);
    return taskIndex > 0 && completedTasks.includes(courseTasks[taskIndex - 1].id);
  };

  const handleStartTask = (task) => {
    setSelectedTask(task);
    setCode(task.defaultCode);
    setOutput('');
  };

  return (
    <div className="tasks-layout">
      <button 
        className="menu-toggle-button" 
        onClick={() => setIsMenuOpen(true)}
      >
        {'‚ò∞'}
      </button>

      <SidebarMenu 
        isOpen={isMenuOpen} 
        onClose={() => setIsMenuOpen(false)} 
      />

      <div className="tasks-main-content">
        <header className="tasks-header">
          <h1>–ó–∞–¥–∞—á–∏ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é</h1>
          <p>–†–µ—à–∞–π—Ç–µ –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã –∑–∞–∫—Ä–µ–ø–∏—Ç—å –∑–Ω–∞–Ω–∏—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è–º</p>
        </header>

        {!selectedTask ? (
          <>
            <div className="course-selector-container">
              <select
                className="course-selector"
                value={selectedCourse || ''}
                onChange={(e) => setSelectedCourse(e.target.value ? parseInt(e.target.value) : null)}
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å</option>
                {programmingCourses.map(course => (
                  <option key={course.id} value={course.id}>{course.name}</option>
                ))}
              </select>
            </div>

            {selectedCourse && (
              <div className="tasks-container">
                <h2 className="tasks-title">–ó–∞–¥–∞—á–∏ –ø–æ –∫—É—Ä—Å—É: {programmingCourses.find(c => c.id === selectedCourse).name}</h2>
                <div className="tasks-grid">
                  {tasks[selectedCourse]?.map(task => (
                    <div 
                      key={task.id} 
                      className={`task-card ${!isTaskUnlocked(task) ? 'locked' : ''}`}
                    >
                      <div className="task-content">
                        <div className="task-header">
                          <h3 className="task-title">{task.title}</h3>
                          <span className={`task-difficulty ${task.difficulty.toLowerCase()}`}>
                            {task.difficulty}
                          </span>
                        </div>
                        <p className="task-description">{task.description}</p>
                        {!isTaskUnlocked(task) && (
                          <div className="task-lock-message">
                            –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                          </div>
                        )}
                      </div>
                      <div className="task-actions">
                        <button
                          className={`start-task-button ${!isTaskUnlocked(task) ? 'disabled' : ''}`}
                          onClick={() => isTaskUnlocked(task) && handleStartTask(task)}
                          disabled={!isTaskUnlocked(task)}
                        >
                          –†–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </>
        ) : (
          <div className="task-solution-container">
            <button 
              className="back-button"
              onClick={() => setSelectedTask(null)}
            >
              ‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
            </button>

            <div className="task-details">
              <h2 className="task-title">{selectedTask.title}</h2>
              <span className={`task-difficulty ${selectedTask.difficulty.toLowerCase()}`}>
                {selectedTask.difficulty}
              </span>
              
              <div className="task-description">
                <p>{selectedTask.description}</p>
              </div>

              <div className="test-cases">
                <h3>–ü—Ä–∏–º–µ—Ä—ã —Ç–µ—Å—Ç–æ–≤:</h3>
                {selectedTask.testCases.map((testCase, index) => (
                  <div key={index} className="test-case">
                    <p><strong>–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</strong> {testCase.input}</p>
                    <p><strong>–û–∂–∏–¥–∞–µ–º—ã–π –≤—ã–≤–æ–¥:</strong> {testCase.output}</p>
                  </div>
                ))}
              </div>

              <div className="explanation">
                <h3>–û–±—ä—è—Å–Ω–µ–Ω–∏–µ:</h3>
                <p>{selectedTask.explanation}</p>
              </div>
            </div>

            <div className="code-editor-container">
              <h3>–í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ:</h3>
              <textarea
                className="code-editor"
                value={code}
                onChange={(e) => setCode(e.target.value)}
                spellCheck="false"
              />
              <div className="editor-actions">
                <button
                  className="run-button"
                  onClick={handleRunCode}
                  disabled={isLoading}
                >
                  {isLoading ? '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–¥'}
                </button>
                <button
                  className="submit-button"
                  onClick={handleSubmitSolution}
                  disabled={isLoading}
                >
                  {isLoading ? '–ü—Ä–æ–≤–µ—Ä–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ'}
                </button>
              </div>
            </div>

            {output && (
              <div className="output-container">
                <h3>–†–µ–∑—É–ª—å—Ç–∞—Ç:</h3>
                <pre className="output">{output}</pre>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default TasksPage;