// protoc --go_out=./pkg --go_opt=paths=source_relative --go-grpc_out=./pkg --go-grpc_opt=paths=source_relative ./api/grpc/v1/learning.proto
syntax = "proto3";

package learning.v1;

option go_package = "api/learning/v1;v1";

service Learning {
    // Курсы
    rpc GetCoursesList(GetCoursesListRequest) returns (GetCoursesListResponse);
    rpc GetCourseCategories(GetCourseCategoriesRequest) returns (GetCourseCategoriesResponse);
    // Уроки
    rpc GetCourseLessons(GetCourseLessonsRequest) returns (GetCourseLessonsResponse);
    rpc GetLessonDetails(GetLessonDetailsRequest) returns (GetLessonDetailsResponse);
}

message Course {
    int64 id = 1;
    string title = 2;
    string description = 3;
    string duration = 4;
    string difficulty = 5;
    string category = 6;
    string imageURL = 7;
    bool isEnrolled = 8;
}

message Lesson {
    int64 id = 1;
    int64 courseID = 2;
    string title = 3;
    string description = 4;
    string duration = 5;
    optional string content = 6;
}

message GetCoursesListRequest {
    int64 userID = 1;
    repeated string categories = 2;
    int64 limit = 3;
    int64 offset = 4;
}
message GetCoursesListResponse {
    repeated Course courses = 1;
    bool hasNext = 2;
}

message GetCourseCategoriesRequest {
}
message GetCourseCategoriesResponse {
    repeated string categories = 1;
}

message GetCourseLessonsRequest {
    int64 courseID = 1;
    int64 limit = 2;
    int64 offset = 3;
}
message GetCourseLessonsResponse {
    repeated Lesson lessons = 1;
    bool hasNext = 2;
}

message GetLessonDetailsRequest {
    int64 lessonID = 1;
}
message GetLessonDetailsResponse {
    Lesson lesson = 1;
}