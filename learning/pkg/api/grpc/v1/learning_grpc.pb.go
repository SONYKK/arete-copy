// protoc --go_out=./pkg --go_opt=paths=source_relative --go-grpc_out=./pkg --go-grpc_opt=paths=source_relative ./api/grpc/v1/learning.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: api/grpc/v1/learning.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Learning_GetCoursesList_FullMethodName      = "/learning.v1.Learning/GetCoursesList"
	Learning_GetCourseCategories_FullMethodName = "/learning.v1.Learning/GetCourseCategories"
	Learning_GetCourseLessons_FullMethodName    = "/learning.v1.Learning/GetCourseLessons"
	Learning_GetLessonDetails_FullMethodName    = "/learning.v1.Learning/GetLessonDetails"
)

// LearningClient is the client API for Learning service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LearningClient interface {
	// Курсы
	GetCoursesList(ctx context.Context, in *GetCoursesListRequest, opts ...grpc.CallOption) (*GetCoursesListResponse, error)
	GetCourseCategories(ctx context.Context, in *GetCourseCategoriesRequest, opts ...grpc.CallOption) (*GetCourseCategoriesResponse, error)
	// Уроки
	GetCourseLessons(ctx context.Context, in *GetCourseLessonsRequest, opts ...grpc.CallOption) (*GetCourseLessonsResponse, error)
	GetLessonDetails(ctx context.Context, in *GetLessonDetailsRequest, opts ...grpc.CallOption) (*GetLessonDetailsResponse, error)
}

type learningClient struct {
	cc grpc.ClientConnInterface
}

func NewLearningClient(cc grpc.ClientConnInterface) LearningClient {
	return &learningClient{cc}
}

func (c *learningClient) GetCoursesList(ctx context.Context, in *GetCoursesListRequest, opts ...grpc.CallOption) (*GetCoursesListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCoursesListResponse)
	err := c.cc.Invoke(ctx, Learning_GetCoursesList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningClient) GetCourseCategories(ctx context.Context, in *GetCourseCategoriesRequest, opts ...grpc.CallOption) (*GetCourseCategoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCourseCategoriesResponse)
	err := c.cc.Invoke(ctx, Learning_GetCourseCategories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningClient) GetCourseLessons(ctx context.Context, in *GetCourseLessonsRequest, opts ...grpc.CallOption) (*GetCourseLessonsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCourseLessonsResponse)
	err := c.cc.Invoke(ctx, Learning_GetCourseLessons_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningClient) GetLessonDetails(ctx context.Context, in *GetLessonDetailsRequest, opts ...grpc.CallOption) (*GetLessonDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLessonDetailsResponse)
	err := c.cc.Invoke(ctx, Learning_GetLessonDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LearningServer is the server API for Learning service.
// All implementations must embed UnimplementedLearningServer
// for forward compatibility.
type LearningServer interface {
	// Курсы
	GetCoursesList(context.Context, *GetCoursesListRequest) (*GetCoursesListResponse, error)
	GetCourseCategories(context.Context, *GetCourseCategoriesRequest) (*GetCourseCategoriesResponse, error)
	// Уроки
	GetCourseLessons(context.Context, *GetCourseLessonsRequest) (*GetCourseLessonsResponse, error)
	GetLessonDetails(context.Context, *GetLessonDetailsRequest) (*GetLessonDetailsResponse, error)
	mustEmbedUnimplementedLearningServer()
}

// UnimplementedLearningServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLearningServer struct{}

func (UnimplementedLearningServer) GetCoursesList(context.Context, *GetCoursesListRequest) (*GetCoursesListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoursesList not implemented")
}
func (UnimplementedLearningServer) GetCourseCategories(context.Context, *GetCourseCategoriesRequest) (*GetCourseCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseCategories not implemented")
}
func (UnimplementedLearningServer) GetCourseLessons(context.Context, *GetCourseLessonsRequest) (*GetCourseLessonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourseLessons not implemented")
}
func (UnimplementedLearningServer) GetLessonDetails(context.Context, *GetLessonDetailsRequest) (*GetLessonDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLessonDetails not implemented")
}
func (UnimplementedLearningServer) mustEmbedUnimplementedLearningServer() {}
func (UnimplementedLearningServer) testEmbeddedByValue()                  {}

// UnsafeLearningServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LearningServer will
// result in compilation errors.
type UnsafeLearningServer interface {
	mustEmbedUnimplementedLearningServer()
}

func RegisterLearningServer(s grpc.ServiceRegistrar, srv LearningServer) {
	// If the following call pancis, it indicates UnimplementedLearningServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Learning_ServiceDesc, srv)
}

func _Learning_GetCoursesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoursesListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServer).GetCoursesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Learning_GetCoursesList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServer).GetCoursesList(ctx, req.(*GetCoursesListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Learning_GetCourseCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServer).GetCourseCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Learning_GetCourseCategories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServer).GetCourseCategories(ctx, req.(*GetCourseCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Learning_GetCourseLessons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourseLessonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServer).GetCourseLessons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Learning_GetCourseLessons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServer).GetCourseLessons(ctx, req.(*GetCourseLessonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Learning_GetLessonDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLessonDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServer).GetLessonDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Learning_GetLessonDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServer).GetLessonDetails(ctx, req.(*GetLessonDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Learning_ServiceDesc is the grpc.ServiceDesc for Learning service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Learning_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "learning.v1.Learning",
	HandlerType: (*LearningServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCoursesList",
			Handler:    _Learning_GetCoursesList_Handler,
		},
		{
			MethodName: "GetCourseCategories",
			Handler:    _Learning_GetCourseCategories_Handler,
		},
		{
			MethodName: "GetCourseLessons",
			Handler:    _Learning_GetCourseLessons_Handler,
		},
		{
			MethodName: "GetLessonDetails",
			Handler:    _Learning_GetLessonDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/grpc/v1/learning.proto",
}
